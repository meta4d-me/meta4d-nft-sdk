/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { M4mDao, M4mDaoInterface } from "../M4mDao";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "SetConvertibleList",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    name: "convertibleList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "nft",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "setConvertibleList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638129fc1c146100715780638da5cb5b14610079578063b8a058fe14610099578063c068541f146100cc578063f2fde38b146100df575b600080fd5b61006f6100f2565b005b61006f610131565b6033546040516001600160a01b0390911681526020015b60405180910390f35b6100bc6100a73660046103ee565b60656020526000908152604090205460ff1681565b6040519015158152602001610090565b61006f6100da366004610412565b6101f2565b61006f6100ed3660046103ee565b61027f565b6033546001600160a01b031633146101255760405162461bcd60e51b815260040161011c90610450565b60405180910390fd5b61012f6000610313565b565b600054610100900460ff1661014c5760005460ff1615610150565b303b155b6101b35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161011c565b600054610100900460ff161580156101d5576000805461ffff19166101011790555b6101dd610365565b80156101ef576000805461ff00191690555b50565b6033546001600160a01b0316331461021c5760405162461bcd60e51b815260040161011c90610450565b6001600160a01b038216600081815260656020908152604091829020805460ff19168515159081179091558251938452908301527f1922e8a0af2e5c11ae62b29f0916b049b7e95b88e79c2342e8c4f0b20d455c33910160405180910390a15050565b6033546001600160a01b031633146102a95760405162461bcd60e51b815260040161011c90610450565b6001600160a01b03811661030e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161011c565b6101ef815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166103d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161011c565b61012f33610313565b6001600160a01b03811681146101ef57600080fd5b60006020828403121561040057600080fd5b813561040b816103d9565b9392505050565b6000806040838503121561042557600080fd5b8235610430816103d9565b91506020830135801515811461044557600080fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122013ea293760090be566bf7a36aff0a34270db0c8e7e8de3660447749f7266c38264736f6c634300080c0033";

type M4mDaoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: M4mDaoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class M4mDao__factory extends ContractFactory {
  constructor(...args: M4mDaoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "M4mDao";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<M4mDao> {
    return super.deploy(overrides || {}) as Promise<M4mDao>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): M4mDao {
    return super.attach(address) as M4mDao;
  }
  connect(signer: Signer): M4mDao__factory {
    return super.connect(signer) as M4mDao__factory;
  }
  static readonly contractName: "M4mDao";
  public readonly contractName: "M4mDao";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): M4mDaoInterface {
    return new utils.Interface(_abi) as M4mDaoInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): M4mDao {
    return new Contract(address, _abi, signerOrProvider) as M4mDao;
  }
}
